# -*- coding: utf-8 -*-
"""final_lgbm git용

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13mX-OiPevOgku2kvVOaVJDgw7X1x0tqv

# 1. 구글 드라이브 마운트
"""

from google.colab import drive
drive.mount('/content/gdrive')

cd /content/gdrive/My \Drive/

#선택적
# cd Colab \Notebooks/

"""## Google Colab 사용시 설치법"""

!git clone --recursive https://github.com/Microsoft/LightGBM

# Commented out IPython magic to ensure Python compatibility.
# %cd LightGBM/

!mkdir build

!cmake -DUSE_GPU=1 #avoid ..
!make -j$(nproc)

!sudo apt-get -y install python-pip

!sudo -H pip install setuptools pandas numpy scipy scikit-learn -U

# Commented out IPython magic to ensure Python compatibility.
# %cd python-package/

!sudo python setup.py install --precompile

# lgbm 설치시 pandas에서 오류가 나 재설정한 부분(선택적)
!pip install pandas==0.18.1

"""## lgbm 설치된 경로로 추가 설치과정 필요"""

cd /content/gdrive/My \Drive/

# 선택적, 개별 드라이브 상황에 따라 경로 설정->but LightGBM을 설치한 경로에 맞춰야 함
# cd 경로/

cd LightGBM

cd python-package

!sudo python setup.py install --precompile

"""## 분석을 위해 경로 재설정"""

from google.colab import drive
drive.mount('/content/gdrive')

cd /content/gdrive/My \Drive/

# 선택적
# cd 경로 예) cd 추가경로 \띄어쓰기있으면앞에원화표시해주세요/

"""# 2. 기본 패키지 및 설정, 데이터 적재"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split

pd.set_option('display.max_columns', None)

train = pd.read_csv('final_train_merged.csv')
test = pd.read_csv('final_test_merged.csv')

# test에 고객 아이디가 없어서 아이디 있는 파일 중 아무거나 가져옴. 
# test용 고객 아이디 있는 데이터면 수정해도 무방

tt = pd.read_csv('pca_test_all_c_fraud.csv')

del train['addr1_na']
del test['addr1_na']

del train['Unnamed: 0']
del test['Unnamed: 0']

X = train.iloc[:, 1:].values
y = train.iloc[:, 0].values

X_test = test.values

print(X.shape, y.shape)

X_train, X_valid, y_train, y_valid = train_test_split(X, y, test_size=0.25)

"""# 3. lgbm"""

import lightgbm as lgb
# import matplotlib.pyplot as plt
# from sklearn.model_selection import PredefinedSplit
from sklearn.model_selection import GridSearchCV, ParameterGrid
# from sklearn.metrics import (roc_curve, auc, accuracy_score)
from sklearn.metrics import roc_auc_score

params = {
    'task': 'train',
    'boosting_type': 'gbdt',
    'objective': 'binary',
    'metric': {'binary_logloss', 'auc'},
    'metric_freq': 1,
    'is_training_metric': True,
    'max_bin': 255,
    'learning_rate': 0.01,
    'num_leaves': 63,
    'tree_learner': 'serial',
    'feature_fraction': 0.8,
    'bagging_fraction': 0.8,
    'bagging_freq': 5,
    'min_data_in_leaf': 50,
    'min_sum_hessian_in_leaf': 5,
    'is_enable_sparse': True,
    'use_two_round_loading': False,
    'is_save_binary_file': False,
    'output_model': 'LightGBM_model.txt',
    'num_machines': 1,
    'local_listen_port': 12400,
    'machine_list_file': 'mlist.txt',
    'verbose': 0,
    'subsample_for_bin': 200000,
    'min_child_samples': 20,
    'min_child_weight': 0.001,
    'min_split_gain': 0.0,
    'colsample_bytree': 1.0,
    'reg_alpha': 0.0,
    'reg_lambda': 0.0
}

lgb_train = lgb.Dataset(X_train, y_train)
lgb_eval = lgb.Dataset(X_valid, y_valid, reference=lgb_train)

model = lgb.train(params, lgb_train, 2500, lgb_eval, verbose_eval=10,  early_stopping_rounds=100)

y_valid_pred = model.predict(X_valid)
roc_auc_score(y_valid, y_valid_pred)

prediction = model.predict(X_test)

"""# 4. 제출용 csv"""

tt['isFraud'] = prediction

tt2 = tt[['TransactionID', 'isFraud']]

tt2.to_csv('lgbm_git_.csv', index=False)